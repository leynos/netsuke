name: Stage Release Artefacts
description: Stage release artefacts using a TOML configuration file.

inputs:
  config-file:
    description: Path to the project-specific TOML staging configuration file.
    required: true
  target:
    description: The target key from the configuration file to be staged.
    required: true

outputs:
  artifact_dir:
    description: Absolute path to the directory containing the staged artefacts.
    value: ${{ steps.run-stage.outputs.artifact_dir }}
  dist_dir:
    description: Absolute path to the workspace distribution directory.
    value: ${{ steps.run-stage.outputs.dist_dir }}
  staged_files:
    description: Newline-separated list of staged file names.
    value: ${{ steps.run-stage.outputs.staged_files }}
  artefact_map:
    description: JSON map of named artefact outputs to their absolute paths.
    value: ${{ steps.run-stage.outputs.artefact_map }}
  checksum_map:
    description: JSON map of staged file names to their checksum digests.
    value: ${{ steps.run-stage.outputs.checksum_map }}
  binary_path:
    description: Absolute path to the staged binary artefact, when available.
    value: ${{ steps.run-stage.outputs.binary_path }}
  man_path:
    description: Absolute path to the staged manual page artefact, when available.
    value: ${{ steps.run-stage.outputs.man_path }}
  license_path:
    description: Absolute path to the staged licence artefact, when available.
    value: ${{ steps.run-stage.outputs.license_path }}

runs:
  using: composite
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@8d55fbecc275b1c35dbe060458839f8d30439ccf
      with:
        python-version: '3.11'
    - id: run-stage
      name: Run staging script
      shell: bash
      run: |
        uv run "${{ github.action_path }}/scripts/stage.py" "${{ inputs.config-file }}" "${{ inputs.target }}"
