name: Release Binary

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: linux
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            ext: ""
#          - os: windows
#            arch: x86_64
#            target: x86_64-pc-windows-msvc
#            ext: ".exe"
#          - os: windows
#            arch: aarch64
#            target: aarch64-pc-windows-msvc
#            ext: ".exe"
#          - os: macos
#            arch: x86_64
#            target: x86_64-apple-darwin
#            ext: ""
#          - os: macos
#            arch: aarch64
#            target: aarch64-apple-darwin
#            ext: ""
          - os: freebsd
            arch: x86_64
            target: x86_64-unknown-freebsd
            ext: ""
#          - os: freebsd
#            arch: aarch64
#            target: aarch64-unknown-freebsd
#            ext: ""
#          - os: openbsd
#            arch: x86_64
#            target: x86_64-unknown-openbsd
#            ext: ""
#          - os: openbsd
#            arch: aarch64
#            target: aarch64-unknown-openbsd
#            ext: ""
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - name: Setup Python 3.11
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11'
      - name: Verify tag matches Cargo.toml
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME#v}"
          toml_path="${CARGO_TOML_PATH:-Cargo.toml}"
          cargo_version="$(
            CARGO_TOML_PATH="$toml_path" \
            "${{ steps.setup-python.outputs.python-path }}" - <<'PY' || echo ""
import os, tomllib
with open(os.environ['CARGO_TOML_PATH'], 'rb') as f:
    print(tomllib.load(f)['package']['version'])
PY
          )"
          if [ -z "${cargo_version:-}" ]; then
            echo "::error title=Cargo.toml parse failure::Could not read package.version from ${toml_path}. Ensure Python â‰¥3.11 (tomllib available) and that the manifest contains [package], or set CARGO_TOML_PATH to the crate's Cargo.toml."
            exit 1
          fi
          if [ "$tag" != "$cargo_version" ]; then
            echo "::error title=Tag/Cargo.toml mismatch::Tag version $tag does not match Cargo.toml version $cargo_version"
            exit 1
          fi
          echo "Release tag $tag matches Cargo.toml version."
      - name: Setup Rust
        uses: leynos/shared-actions/.github/actions/setup-rust@c6559452842af6a83b83429129dccaf910e34562
      - name: Install MSRV toolchain
        run: rustup toolchain install 1.89.0
      - name: Add MSRV release target
        run: rustup +1.89.0 target add ${{ matrix.target }}
      - name: Show Rust versions
        run: |
          rustup show
          rustc +1.89.0 --version
          rustc +stable --version
      - name: Cache cross binary
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.cargo/bin/cross
          key: cross-v0.2.5-${{ runner.os }}
      - name: Install cross
        env:
          RUSTFLAGS: ""
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.5
      - name: Verify MSRV build
        run: cross +1.89.0 build --release --target ${{ matrix.target }}
      - name: Cache cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Add release target
        run: rustup +stable target add ${{ matrix.target }}
      - name: Build release binary
        run: cross +stable build --release --target ${{ matrix.target }}
      - name: Prepare artifact
        run: |
          mkdir -p artifacts/${{ matrix.os }}-${{ matrix.arch }}
          cp target/${{ matrix.target }}/release/${{ env.REPO_NAME }}${{ matrix.ext }} \
            artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.REPO_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          sha256sum artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.REPO_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} > \
            artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.REPO_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}.sha256
      - name: Upload release artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/${{ matrix.os }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - uses: softprops/action-gh-release@26994186c0ac3ef5cae75ac16aa32e8153525f77 # v1
        with:
          generate_release_notes: true
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          path: artifacts
      - run: |
          for dir in artifacts/${{ env.REPO_NAME }}-*; do
            for file in "$dir"/*; do
              gh release upload "${{ github.ref_name }}" "$file"
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
