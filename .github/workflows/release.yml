---
name: Release Binary

'on':
  push:
    tags:
      - 'v*.*.*'
  workflow_call:
    inputs:
      publish:
        description: >-
          Whether the workflow should publish artefacts to the GitHub release
          associated with the tag. Defaults to `false` when invoked as a
          reusable workflow.
        required: false
        type: boolean
        default: false
    outputs:
      bin_name:
        description: Binary name extracted from Cargo.toml
        value: ${{ jobs.metadata.outputs.bin_name }}
      version:
        description: Crate version resolved from Cargo.toml
        value: ${{ jobs.metadata.outputs.version }}
      should_publish:
        description: Whether artefacts should be published to the release
        value: ${{ jobs.metadata.outputs.should_publish }}

env:
  REPO_NAME: ${{ github.event.repository.name }}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ensure_version.outputs['crate-version'] }}
      bin_name: ${{ steps.bin_name.outputs.value }}
      should_publish: ${{ steps.publish.outputs.value }}
    steps:
      - uses: >-
          actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        # v4.1.2
      - name: Setup Python 3.11
        uses: >-
          actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        # v5
        with:
          python-version: '3.11'
      - id: publish
        name: Determine publish mode
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = 'push' ]; then
            echo "value=true" >>"$GITHUB_OUTPUT"
          else
            echo "value=${{ inputs.publish }}" >>"$GITHUB_OUTPUT"
          fi
      - id: ensure_version
        name: Read package version from Cargo.toml
        uses: >-
          leynos/shared-actions/.github/actions/ensure-cargo-version@0ac4b6ec81dbef45594b37bc2afaaa60e30b5b20
        with:
          check-tag: ${{ fromJSON(steps.publish.outputs.value) }}
      - id: bin_name
        name: Extract binary name from Cargo.toml
        shell: bash
        run: |
          set -euo pipefail
          manifest_path="${CARGO_TOML_PATH:-Cargo.toml}"
          name="$(python3 .github/workflows/scripts/read_manifest.py \
            --manifest-path "$manifest_path" name 2>/tmp/name.err)"
          if [ -z "$name" ]; then
            message='::error title=Cargo.toml parse failure::Could not read '
            message+='package.name from '
            message+="${manifest_path}."
            echo "$message"
            cat /tmp/name.err >&2 || true
            exit 1
          fi
          echo "value=$name" >>"$GITHUB_OUTPUT"

  build-linux:
    needs: metadata
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact: linux-amd64
            package_arch: amd64
          - target: aarch64-unknown-linux-gnu
            artifact: linux-arm64
            package_arch: arm64
    steps:
      - uses: >-
          actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        # v4.1.2
      - name: Build Linux release
        uses: >-
          leynos/shared-actions/.github/actions/rust-build-release@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          target: ${{ matrix.target }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          version: ${{ needs.metadata.outputs.version }}
          # Package formats are produced by linux-packages below
      - name: Install nfpm
        shell: bash
        run: |
          set -euo pipefail
          version="v2.39.0"
            case "$(uname -s)" in
              Linux) asset_os="Linux" ;;
              *)
                printf '%s%s\n' \
                  "::error title=Unsupported OS::nfpm install requires" \
                  " Linux runners"
                exit 1
                ;;
            esac
            case "$(uname -m)" in
              x86_64) asset_arch="x86_64" ;;
              aarch64 | arm64) asset_arch="arm64" ;;
              *)
                printf '%s%s\n' \
                  "::error title=Unsupported architecture::Unknown arch" \
                  " '$(uname -m)'"
                exit 1
                ;;
            esac
          asset="nfpm_${version#v}_${asset_os}_${asset_arch}.tar.gz"
          base_url="https://github.com/goreleaser/nfpm/releases/download/${version}"
          tmp_dir="$(mktemp -d)"
          trap 'rm -rf "${tmp_dir}"' EXIT
          curl -fsSL "${base_url}/${asset}" -o "${tmp_dir}/${asset}"
          curl -fsSL "${base_url}/checksums.txt" -o "${tmp_dir}/checksums.txt"
          checksum_line="$(
            grep "  ${asset}$" "${tmp_dir}/checksums.txt" || true
          )"
          if [ -z "${checksum_line}" ]; then
            printf '%s%s\n' \
              "::error title=Checksum missing::No checksum entry for" \
              " ${asset}"
            exit 1
          fi
          if command -v sha256sum >/dev/null 2>&1; then
            (
              cd "${tmp_dir}"
              printf '%s\n' "${checksum_line}" | sha256sum --check -
            )
          else
            expected="$(printf '%s\n' "${checksum_line}" | awk '{print $1}')"
            echo "${expected}  ${tmp_dir}/${asset}" | shasum -a 256 --check -
          fi
          tar -xzf "${tmp_dir}/${asset}" -C "${tmp_dir}" nfpm
          install -m 0755 "${tmp_dir}/nfpm" "${RUNNER_TEMP}/nfpm"
          echo "${RUNNER_TEMP}" >>"${GITHUB_PATH}"
      - name: Package Linux artefacts with dependencies
        shell: bash
        env:
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
          TARGET: ${{ matrix.target }}
          VERSION: ${{ needs.metadata.outputs.version }}
          MAN_PATH: >-
            dist/${{ needs.metadata.outputs.bin_name }}_linux_${{
            matrix.package_arch }}/${{ needs.metadata.outputs.bin_name }}.1
        run: |
          set -euo pipefail
          python3 .github/workflows/scripts/package_linux.py \
            --project-dir . \
            --bin-name "${BIN_NAME}" \
            --package-name "${BIN_NAME}" \
            --target "${TARGET}" \
            --version "${VERSION}" \
            --formats deb rpm \
            --man-path "${MAN_PATH}" \
            --deb-depends ninja-build \
            --rpm-depends ninja-build
      - name: Prune packaging metadata
        shell: bash
        run: rm -rf dist/.man dist/nfpm.yaml
      - name: Upload Linux artefacts
        uses: >-
          actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        # v4
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.artifact }}
          path: dist

  build-windows:
    needs: metadata
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            package_arch: amd64
            msi_arch: x64
          - target: aarch64-pc-windows-msvc
            package_arch: arm64
            msi_arch: arm64
    steps:
      - uses: >-
          actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        # v4.1.2
      - name: Install uv
        uses: >-
          astral-sh/setup-uv@4cda7d73322c50eac316ad623a716f09a2db2ac7
        # v3.1.2
        with:
          python-version: '3.11'
      - name: Build Windows release
        uses: >-
          leynos/shared-actions/.github/actions/rust-build-release@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          target: ${{ matrix.target }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          version: ${{ needs.metadata.outputs.version }}
      - id: stage
        name: Stage Windows artefacts
        shell: bash
        env:
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
          TARGET: ${{ matrix.target }}
          PLATFORM: windows
          ARCH: ${{ matrix.package_arch }}
        run: |
          set -euo pipefail
          uv run .github/workflows/scripts/stage_windows.py
      - id: normalize_windows_paths
        name: Normalise Windows paths
        shell: bash
        env:
          BIN_PATH: ${{ steps.stage.outputs.binary_path }}
          LICENSE_PATH: ${{ steps.stage.outputs.license_path }}
        run: |
          set -euo pipefail
          if [[ -z "${BIN_PATH:-}" ]]; then
            echo '::error title=Stage output missing::binary_path output empty'
            exit 1
          fi
          if [[ -z "${LICENSE_PATH:-}" ]]; then
            echo '::error title=Stage output missing::license_path output empty'
            exit 1
          fi
          normalise_path() {
            python -c 'from pathlib import PureWindowsPath; import sys; \
              print(PureWindowsPath(sys.argv[1]))' "$1"
          }

          binary_path="$(normalise_path "${BIN_PATH}")"
          license_path="$(normalise_path "${LICENSE_PATH}")"

          {
            printf 'binary_path=%s\n' "$binary_path"
            printf 'license_path=%s\n' "$license_path"
          } >>"$GITHUB_OUTPUT"
      - id: package
        name: Build Windows installer package
        uses: >-
          leynos/shared-actions/.github/actions/windows-package@7bc9b6c15964ef98733aa647b76d402146284ba3
        env:
          PRODUCT_NAME: ${{ needs.metadata.outputs.bin_name }}
          MANUFACTURER: Leynos
          BINARY_PATH: >-
            ${{ steps.normalize_windows_paths.outputs.binary_path }}
          LICENSE_RTF_PATH: >-
            ${{ steps.normalize_windows_paths.outputs.license_path }}
        with:
          architecture: ${{ matrix.msi_arch }}
          version: ${{ needs.metadata.outputs.version }}
          output-basename: ${{ needs.metadata.outputs.bin_name }}
          output-directory: dist
          license-plaintext-path: LICENSE
          upload-artifact: 'false'
      - name: Upload Windows artefacts
        uses: >-
          actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        # v4
        with:
          name: ${{ env.REPO_NAME }}-windows-${{ matrix.package_arch }}
          path: |
            ${{ steps.stage.outputs.artifact_dir }}
            ${{ steps.package.outputs.msi-path }}

  build-macos:
    needs: metadata
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            runner: macos-13
            artifact_suffix: macos-x86_64
            package_arch: x86_64
          - target: aarch64-apple-darwin
            runner: macos-14
            artifact_suffix: macos-arm64
            package_arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: >-
          actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        # v4.1.2
      - name: Install uv
        uses: >-
          astral-sh/setup-uv@4cda7d73322c50eac316ad623a716f09a2db2ac7
        # v3.1.2
        with:
          python-version: '3.11'
      - name: Build macOS release
        uses: >-
          leynos/shared-actions/.github/actions/rust-build-release@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          target: ${{ matrix.target }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          version: ${{ needs.metadata.outputs.version }}
      - id: stage
        name: Stage macOS artefacts
        shell: bash
        env:
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
          TARGET: ${{ matrix.target }}
          PLATFORM: macos
          ARCH: ${{ matrix.package_arch }}
        run: |
          set -euo pipefail
          uv run .github/workflows/scripts/stage_macos.py
      - id: pkg
        name: Build macOS installer package
        uses: >-
          leynos/shared-actions/.github/actions/macos-package@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          name: ${{ needs.metadata.outputs.bin_name }}
          identifier: com.leynos.${{ needs.metadata.outputs.bin_name }}
          binary: ${{ steps.stage.outputs.binary_path }}
          manpage: ${{ steps.stage.outputs.man_path }}
          license-file: LICENSE
          version: ${{ needs.metadata.outputs.version }}
      - name: Stamp architecture into package name
        shell: bash
        env:
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
          VERSION: ${{ needs.metadata.outputs.version }}
          ARCHIVE_SUFFIX: ${{ matrix.artifact_suffix }}
          PKG_PATH: ${{ steps.pkg.outputs.pkg-path }}
        run: |
          set -euo pipefail
          dest="dist/${BIN_NAME}-${VERSION}-${ARCHIVE_SUFFIX}.pkg"
          mkdir -p "$(dirname "$dest")"
          mv "$PKG_PATH" "$dest"
      - name: Upload macOS artefacts
        uses: >-
          actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        # v4
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.artifact_suffix }}
          path: |
            ${{ steps.stage.outputs.artifact_dir }}
            dist/${{ needs.metadata.outputs.bin_name }}-${{
              needs.metadata.outputs.version }}-${{
              matrix.artifact_suffix }}.pkg

  release:
    if: needs.metadata.outputs.should_publish == 'true'
    permissions:
      contents: write
    needs:
      - metadata
      - build-linux
      - build-windows
      - build-macos
    runs-on: ubuntu-latest
    steps:
      - uses: >-
          actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        # v4.1.2
      - name: Ensure release exists (draft)
        shell: bash
        run: |
          set -euo pipefail
          gh release view "${{ github.ref_name }}" >/dev/null 2>&1 || \
            gh release create "${{ github.ref_name }}" \
              --draft \
              --verify-tag \
              --notes "Automated release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: >-
          actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        # v4
        with:
          path: dist
          pattern: ${{ env.REPO_NAME }}-*
      - id: upload_assets
        name: Upload artefacts to release
        uses: ./.github/actions/upload-release-assets
        with:
          release-tag: ${{ github.ref_name }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          dist-dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check asset upload errors
        if: steps.upload_assets.outputs.upload-error == 'true'
        run: |
          echo "Error uploading release assets:"
          printf '%s\n' "${{ steps.upload_assets.outputs.error-message }}"
          exit 1
