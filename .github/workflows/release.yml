name: Release Binary

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REPO_NAME: ${{ github.event.repository.name }}
  PACKAGE_PLATFORMS: |
    linux x86_64 linux amd64
    linux aarch64 linux arm64
    macos x86_64 darwin amd64
    macos aarch64 darwin arm64
    freebsd x86_64 freebsd amd64

concurrency:
  group: release-${{ github.ref }}
jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: linux
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            ext: ""
#          - os: windows
#            arch: x86_64
#            target: x86_64-pc-windows-msvc
#            ext: ".exe"
#          - os: windows
#            arch: aarch64
#            target: aarch64-pc-windows-msvc
#            ext: ".exe"
#          - os: macos
#            arch: x86_64
#            target: x86_64-apple-darwin
#            ext: ""
#          - os: macos
#            arch: aarch64
#            target: aarch64-apple-darwin
#            ext: ""
          - os: freebsd
            arch: x86_64
            target: x86_64-unknown-freebsd
            ext: ""
#          - os: freebsd
#            arch: aarch64
#            target: aarch64-unknown-freebsd
#            ext: ""
#          - os: openbsd
#            arch: x86_64
#            target: x86_64-unknown-openbsd
#            ext: ""
#          - os: openbsd
#            arch: aarch64
#            target: aarch64-unknown-openbsd
#            ext: ""
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Setup Python 3.11
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5
        with:
          python-version: '3.11'
      - name: Verify tag matches Cargo.toml
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME#v}"
          toml_path="${CARGO_TOML_PATH:-Cargo.toml}"
          cargo_version="$(
            CARGO_TOML_PATH="$toml_path" \
            python - <<'PY' || echo ""
import os, tomllib
with open(os.environ['CARGO_TOML_PATH'], 'rb') as f:
    print(tomllib.load(f)['package']['version'])
PY
          )"
          if [ -z "${cargo_version:-}" ]; then
            echo "::error title=Cargo.toml parse failure::Could not read package.version from ${toml_path}. Ensure Python â‰¥3.11 (tomllib available) and that the manifest contains [package], or set CARGO_TOML_PATH to the crate's Cargo.toml."
            exit 1
          fi
          if [ "$tag" != "$cargo_version" ]; then
            echo "::error title=Tag/Cargo.toml mismatch::Tag version $tag does not match Cargo.toml version $cargo_version"
            exit 1
          fi
          echo "Release tag $tag matches Cargo.toml version."
      - name: Export BIN_NAME
        run: |
          set -euo pipefail
          toml_path="${CARGO_TOML_PATH:-Cargo.toml}"
          BIN_NAME="$(
            python - <<'PY' || echo ""
import os, tomllib
path = os.environ.get('CARGO_TOML_PATH', 'Cargo.toml')
with open(path, 'rb') as f:
    data = tomllib.load(f)
name = (data.get('package') or {}).get('name')
bins = [b.get('name') for b in data.get('bin', []) if 'name' in b]
print((bins[0] if bins else name) or '')
PY
          )"
          if [ -z "${BIN_NAME:-}" ]; then
            echo "::error title=Binary name not found::Set package.name or [[bin]] name in ${toml_path}"
            exit 1
          fi
          echo "BIN_NAME=$BIN_NAME" >> "$GITHUB_ENV"
      - name: Setup Rust
        uses: leynos/shared-actions/.github/actions/setup-rust@c6559452842af6a83b83429129dccaf910e34562
      - name: Install MSRV toolchain
        run: rustup toolchain install 1.89.0
      - name: Add MSRV release target
        run: rustup +1.89.0 target add ${{ matrix.target }}
      - name: Show Rust versions
        run: |
          rustup show
          rustc +1.89.0 --version
          rustc +stable --version
      - name: Cache cross binary
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: ~/.cargo/bin/cross
          key: cross-v0.2.5-${{ runner.os }}
      - name: Install cross
        env:
          RUSTFLAGS: ""
        run: cargo install --locked cross --git https://github.com/cross-rs/cross --tag v0.2.5
      - name: Verify MSRV build
        run: cross +1.89.0 build --release --target ${{ matrix.target }}
      - name: Cache cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Add release target
        run: rustup +stable target add ${{ matrix.target }}
      - name: Build release binary
        run: cross +stable build --release --target ${{ matrix.target }}
      - name: Prepare artifact
        run: bash ./scripts/package-artifact.sh "${{ matrix.os }}" "${{ matrix.arch }}" "${{ matrix.target }}" "${{ matrix.ext }}" "${BIN_NAME}"
      - name: Upload release artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/${{ matrix.os }}-${{ matrix.arch }}

  build-macos:
    needs: build
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
          - arch: aarch64
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Cache cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-
      - name: Resolve binary name from Cargo.toml
        id: bin-name
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5
        with:
          python-version: '3.11'
      - name: Export BIN_NAME
        run: |
          set -euo pipefail
          toml_path="${CARGO_TOML_PATH:-Cargo.toml}"
          BIN_NAME="$(
            python - <<'PY' || echo ""
import os, tomllib, sys
path=os.environ.get("CARGO_TOML_PATH","Cargo.toml")
with open(path,'rb') as f:
  m=tomllib.load(f)
name = (m.get('package') or {}).get('name')
bins = [b.get('name') for b in m.get('bin',[]) if 'name' in b]
print((bins[0] if bins else name) or "")
PY
          )"
          if [ -z "${BIN_NAME:-}" ]; then
            echo "::error title=Binary name not found::Set package.name or [[bin]] name in ${toml_path}"
            exit 1
          fi
          echo "BIN_NAME=$BIN_NAME" >> "$GITHUB_ENV"
      - name: Build macOS
        uses: ./.github/actions/cross-build-macos
        with:
          target: ${{ matrix.target }}
          deployment-target: '11.0'
          osx-version: '12.3'
      - name: Prepare artifact
        run: bash ./scripts/package-artifact.sh macos "${{ matrix.arch }}" "${{ matrix.target }}" "" "${BIN_NAME}"
      - name: Upload release artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ env.REPO_NAME }}-macos-${{ matrix.arch }}
          path: artifacts/macos-${{ matrix.arch }}

  package:
    needs: [build, build-macos]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4
        with:
          path: dist
      - name: Set up Rust
        uses: leynos/shared-actions/.github/actions/setup-rust@c6559452842af6a83b83429129dccaf910e34562
      - name: Generate man page
        run: cargo build -q --features manpage --no-default-features
      - name: Setup jq
        uses: vegardit/gha-setup-jq@v1
      - name: Verify man page exists
        run: |
          set -euo pipefail
          host=$(rustc -Vv | awk '/^host:/ {print $2}')
          BIN_NAME="$(cargo metadata --no-deps --format-version 1 \
            | jq -r '.packages[0].targets[] | select(.kind[]=="bin") | .name' \
            | head -n 1)"
          man_src="target/generated-man/${host}/debug/${BIN_NAME}.1"
          test -f "$man_src" || {
            echo "::error title=Manpage missing::${man_src} not found"; exit 1; }
          mkdir -p target/generated-man
          cp "$man_src" "target/generated-man/${BIN_NAME}.1"
      - name: Prepare GoReleaser dist
        run: |
          set -euo pipefail
          BIN_NAME="$(cargo metadata --no-deps --format-version 1 \
            | jq -r '.packages[0].targets[] | select(.kind[]=="bin") | .name' \
            | head -n 1)"
          printf '%s\n' "$PACKAGE_PLATFORMS" | while read -r src_os src_arch dst_os dst_arch; do
            mkdir -p "dist/netsuke_${dst_os}_${dst_arch}"
            mv "dist/${{ env.REPO_NAME }}-${src_os}-${src_arch}/${BIN_NAME}-${src_os}-${src_arch}" \
               "dist/netsuke_${dst_os}_${dst_arch}/netsuke"
            rm -rf "dist/${{ env.REPO_NAME }}-${src_os}-${src_arch}"
          done
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@5742e2a039330cbb23ebf35f046f814d4c6ff811  # v5
        with:
          distribution: goreleaser
          # Use a fixed version to ensure reproducibility
          version: v1.24.0
          args: release --clean --skip=build,publish,announce
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload packaging artefacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ env.REPO_NAME }}-packages
          path: |
            dist/*.tar.gz
            dist/*.deb
            dist/*.rpm
            dist/*_checksums.txt

  release:
    needs: [build, build-macos, package]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Ensure release exists (draft)
        run: |
          set -euo pipefail
          gh release view "${{ github.ref_name }}" >/dev/null 2>&1 || \
            gh release create "${{ github.ref_name }}" --draft --verify-tag --notes "Automated release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4
        with:
          path: artifacts
          pattern: ${{ env.REPO_NAME }}-*
      - run: |
          set -euo pipefail
          shopt -s nullglob
          uploaded=0
          for dir in artifacts/${{ env.REPO_NAME }}-*; do
            for file in "$dir"/*; do
              gh release upload "${{ github.ref_name }}" "$file" --clobber && uploaded=$((uploaded+1))
            done
          done
          if [ "$uploaded" -eq 0 ]; then
            echo "::error title=No artefacts uploaded::No files found in artifacts/"; exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
