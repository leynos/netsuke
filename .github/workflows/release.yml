name: Release Binary

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REPO_NAME: ${{ github.event.repository.name }}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      bin_name: ${{ steps.bin_name.outputs.value }}
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Setup Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5
        with:
          python-version: '3.11'
      - id: version
        name: Verify tag matches Cargo.toml
        uses: leynos/shared-actions/.github/actions/ensure-cargo-version@5f276592fc649268327339d48a56fac3a23b49f0
      - id: bin_name
        name: Extract binary name from Cargo.toml
        shell: bash
        run: |
          set -euo pipefail
          toml_path="${CARGO_TOML_PATH:-Cargo.toml}"
          name="$(
            python3 -c 'import os, sys, tomllib; path = os.environ.get("CARGO_TOML_PATH", "Cargo.toml");
with open(path, "rb") as fh: data = tomllib.load(fh); package = data.get("package") or {}; sys.stdout.write(package.get("name", ""))' || echo ""
          )"
          if [ -z "$name" ]; then
            echo "::error title=Cargo.toml parse failure::Could not read package.name from ${toml_path}."
            exit 1
          fi
          echo "value=$name" >> "$GITHUB_OUTPUT"

  build-linux:
    needs: metadata
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact: linux-amd64
            package_arch: amd64
          - target: aarch64-unknown-linux-gnu
            artifact: linux-arm64
            package_arch: arm64
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Build Linux release
        uses: leynos/shared-actions/.github/actions/rust-build-release@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          target: ${{ matrix.target }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          version: ${{ needs.metadata.outputs.version }}
          # Package formats are produced by linux-packages below
      - name: Package Linux artefacts with dependencies
        uses: leynos/shared-actions/.github/actions/linux-packages@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          project-dir: .
          package-name: ${{ needs.metadata.outputs.bin_name }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          target: ${{ matrix.target }}
          version: ${{ needs.metadata.outputs.version }}
          formats: deb,rpm
          man-paths: dist/${{ needs.metadata.outputs.bin_name }}_linux_${{ matrix.package_arch }}/${{ needs.metadata.outputs.bin_name }}.1
          outdir: dist
          deb-depends: ninja-build
          rpm-depends: ninja-build
      - name: Prune packaging metadata
        shell: bash
        run: rm -rf dist/.man dist/nfpm.yaml
      - name: Upload Linux artefacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.artifact }}
          path: dist

  build-windows:
    needs: metadata
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            package_arch: amd64
          - target: aarch64-pc-windows-msvc
            package_arch: arm64
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Install uv
        uses: astral-sh/setup-uv@4cda7d73322c50eac316ad623a716f09a2db2ac7  # v3.1.2
        with:
          python-version: '3.11'
      - name: Build Windows release
        uses: leynos/shared-actions/.github/actions/rust-build-release@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          target: ${{ matrix.target }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          version: ${{ needs.metadata.outputs.version }}
      - id: stage
        name: Stage Windows artefacts
        shell: bash
        env:
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
          TARGET: ${{ matrix.target }}
          PLATFORM: windows
          ARCH: ${{ matrix.package_arch }}
        run: |
          set -euo pipefail
          uv run .github/workflows/scripts/stage_windows.py
      - id: package
        name: Build Windows installer package
        uses: leynos/shared-actions/.github/actions/windows-package@7bc9b6c15964ef98733aa647b76d402146284ba3
        env:
          PRODUCT_NAME: ${{ needs.metadata.outputs.bin_name }}
          MANUFACTURER: Leynos
          BINARY_PATH: ${{ replace(steps.stage.outputs.binary_path, '/', '\\') }}
          LICENSE_RTF_PATH: ${{ format('dist\\{0}-license.rtf', needs.metadata.outputs.bin_name) }}
        with:
          architecture: ${{ matrix.package_arch == 'amd64' && 'x64' || 'arm64' }}
          version: ${{ needs.metadata.outputs.version }}
          output-basename: ${{ needs.metadata.outputs.bin_name }}
          output-directory: dist
          license-plaintext-path: LICENSE
          license-rtf-path: dist\\${{ needs.metadata.outputs.bin_name }}-license.rtf
          upload-artifact: 'false'
      - name: Upload Windows artefacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ env.REPO_NAME }}-windows-${{ matrix.package_arch }}
          path: |
            ${{ steps.stage.outputs.artifact_dir }}
            ${{ steps.package.outputs.msi-path }}

  build-macos:
    needs: metadata
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            runner: macos-13
            archive_suffix: macos-x86_64
            package_arch: x86_64
          - target: aarch64-apple-darwin
            runner: macos-14
            archive_suffix: macos-arm64
            package_arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Install uv
        uses: astral-sh/setup-uv@4cda7d73322c50eac316ad623a716f09a2db2ac7  # v3.1.2
        with:
          python-version: '3.11'
      - name: Build macOS release
        uses: leynos/shared-actions/.github/actions/rust-build-release@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          target: ${{ matrix.target }}
          bin-name: ${{ needs.metadata.outputs.bin_name }}
          version: ${{ needs.metadata.outputs.version }}
      - id: stage
        name: Stage macOS artefacts
        shell: bash
        env:
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
          TARGET: ${{ matrix.target }}
          PLATFORM: macos
          ARCH: ${{ matrix.package_arch }}
        run: |
          set -euo pipefail
          uv run .github/workflows/scripts/stage_macos.py
      - id: pkg
        name: Build macOS installer package
        uses: leynos/shared-actions/.github/actions/macos-package@7bc9b6c15964ef98733aa647b76d402146284ba3
        with:
          name: ${{ needs.metadata.outputs.bin_name }}
          identifier: com.leynos.netsuke
          binary: ${{ steps.stage.outputs.binary_path }}
          manpage: ${{ steps.stage.outputs.man_path }}
          license-file: LICENSE
          version: ${{ needs.metadata.outputs.version }}
      - name: Stamp architecture into package name
        shell: bash
        run: |
          set -euo pipefail
          pkg="${{ steps.pkg.outputs.pkg-path }}"
          dest="dist/${{ needs.metadata.outputs.bin_name }}-${{ needs.metadata.outputs.version }}-${{ matrix.archive_suffix }}.pkg"
          mkdir -p "$(dirname "$dest")"
          mv "$pkg" "$dest"
      - name: Upload macOS artefacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.archive_suffix }}
          path: |
            ${{ steps.stage.outputs.artifact_dir }}
            dist/${{ needs.metadata.outputs.bin_name }}-${{ needs.metadata.outputs.version }}-${{ matrix.archive_suffix }}.pkg

  release:
    permissions:
      contents: write
    needs:
      - metadata
      - build-linux
      - build-windows
      - build-macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633  # v4.1.2
      - name: Ensure release exists (draft)
        shell: bash
        run: |
          set -euo pipefail
          gh release view "${{ github.ref_name }}" >/dev/null 2>&1 || \
            gh release create "${{ github.ref_name }}" --draft --verify-tag --notes "Automated release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4
        with:
          path: dist
          pattern: ${{ env.REPO_NAME }}-*
      - name: Upload artefacts to release
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          bin_name="${BIN_NAME:?BIN_NAME must be provided}"
          mapfile -t files < <(
            find dist -type f \
              \( -name "*.deb" -o -name "*.rpm" -o -name "*.pkg" -o -name "*.msi" \
              -o -name "${bin_name}" -o -name "${bin_name}.exe" \
              -o -name "${bin_name}.1" -o -name "*.sha256" \) -print
          )
          if [ "${#files[@]}" -eq 0 ]; then
            echo "::error title=No artefacts uploaded::No files found in dist/"
            exit 1
          fi
          declare -A seen=()
          uploaded=0
          for file in "${files[@]}"; do
            dir_name="$(basename "$(dirname "$file")")"
            base_name="$(basename "$file")"
            if [[ "$base_name" =~ \.(deb|rpm|pkg)$ ]]; then
              asset_name="$base_name"
            else
              asset_name="${dir_name}-${base_name}"
            fi
            if [[ -n "${seen[$asset_name]:-}" ]]; then
              echo "::error title=Duplicate release asset::Asset name '$asset_name' would be uploaded more than once"
              exit 1
            fi
            seen[$asset_name]=1
            gh release upload "${{ github.ref_name }}" "$file#${asset_name}" --clobber \
              && uploaded=$((uploaded+1))
          done
          if [ "$uploaded" -eq 0 ]; then
            echo "::error title=No artefacts uploaded::No files were published to the release"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BIN_NAME: ${{ needs.metadata.outputs.bin_name }}
