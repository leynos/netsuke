//! Intermediate Representation structures.
//!
//! This module defines the backend-agnostic build graph used by Netsuke after
//! validation. The IR mirrors the conceptual model of Ninja without embedding
//! any Ninja-specific syntax.
//!
//! # Examples
//!
//! ```
//! use netsuke::ir::{Action, BuildGraph, BuildEdge};
//! use netsuke::ast::Recipe;
//! use std::path::PathBuf;
//!
//! let action = Action {
//!     recipe: Recipe::Command { command: "echo hi".into() },
//!     description: None,
//!     depfile: None,
//!     deps_format: None,
//!     pool: None,
//!     restat: false,
//! };
//! let mut graph = BuildGraph::default();
//! graph.actions.insert("a".into(), action);
//! graph.default_targets.push(PathBuf::from("hello"));
//! ```
//
use std::collections::HashMap;
use std::path::PathBuf;

/// The complete, static build graph.
#[derive(Debug, Default, Clone)]
pub struct BuildGraph {
    /// All unique actions in the build keyed by a stable hash.
    pub actions: HashMap<String, Action>,
    /// All target files to be built keyed by output path.
    pub targets: HashMap<PathBuf, BuildEdge>,
    /// Targets built when no explicit target is requested.
    pub default_targets: Vec<PathBuf>,
}

/// A reusable command analogous to a Ninja rule.
#[derive(Debug, Clone, PartialEq)]
pub struct Action {
    pub recipe: Recipe,
    pub description: Option<String>,
    pub depfile: Option<String>,
    pub deps_format: Option<String>,
    pub pool: Option<String>,
    pub restat: bool,
}

/// A single build statement connecting inputs to outputs.
#[derive(Debug, Clone, PartialEq)]
pub struct BuildEdge {
    /// Identifier of the [`Action`] used for this edge.
    pub action_id: String,
    /// Explicit inputs that trigger a rebuild when changed.
    pub inputs: Vec<PathBuf>,
    /// Outputs explicitly generated by the command.
    pub explicit_outputs: Vec<PathBuf>,
    /// Outputs implicitly generated by the command (Ninja `|`).
    pub implicit_outputs: Vec<PathBuf>,
    /// Order-only dependencies that do not trigger rebuilds (Ninja `||`).
    pub order_only_deps: Vec<PathBuf>,
    /// Always run the command even if the output exists.
    pub phony: bool,
    /// Run the command on every invocation regardless of timestamps.
    pub always: bool,
}

use crate::ast::{NetsukeManifest, Recipe, StringOrList};
use thiserror::Error;

use crate::hasher::ActionHasher;

/// Errors produced during IR generation.
#[derive(Debug, Error)]
pub enum IrGenError {
    #[error("rule '{rule_name}' referenced by target '{target_name}' was not found")]
    RuleNotFound {
        target_name: String,
        rule_name: String,
    },

    #[error("multiple rules for target '{target_name}': {rules:?}")]
    MultipleRules {
        target_name: String,
        rules: Vec<String>,
    },

    #[error("duplicate target outputs: {outputs:?}")]
    DuplicateOutput { outputs: Vec<String> },
}

impl BuildGraph {
    /// Transform a manifest into a [`BuildGraph`].
    ///
    /// # Errors
    ///
    /// Returns [`IrGenError`] when a referenced rule is missing or multiple
    /// rules are specified for a single target.
    pub fn from_manifest(manifest: &NetsukeManifest) -> Result<Self, IrGenError> {
        let mut graph = Self::default();
        let mut rule_map = HashMap::new();

        Self::process_rules(manifest, &mut graph.actions, &mut rule_map);
        Self::process_targets(manifest, &mut graph.actions, &mut graph.targets, &rule_map)?;
        Self::process_defaults(manifest, &mut graph.default_targets);

        Ok(graph)
    }

    fn process_rules(
        manifest: &NetsukeManifest,
        actions: &mut HashMap<String, Action>,
        rule_map: &mut HashMap<String, String>,
    ) {
        for rule in &manifest.rules {
            let hash = register_action(actions, rule.recipe.clone(), rule.description.clone());
            rule_map.insert(rule.name.clone(), hash);
        }
    }

    fn process_targets(
        manifest: &NetsukeManifest,
        actions: &mut HashMap<String, Action>,
        targets: &mut HashMap<PathBuf, BuildEdge>,
        rule_map: &HashMap<String, String>,
    ) -> Result<(), IrGenError> {
        for target in manifest.actions.iter().chain(&manifest.targets) {
            let outputs = to_paths(&target.name);
            let action_id = match &target.recipe {
                Recipe::Rule { rule } => {
                    if let Some(name) = extract_single(rule) {
                        rule_map
                            .get(name)
                            .cloned()
                            .ok_or_else(|| IrGenError::RuleNotFound {
                                target_name: get_target_display_name(&outputs),
                                rule_name: name.to_string(),
                            })?
                    } else {
                        return Err(IrGenError::MultipleRules {
                            target_name: get_target_display_name(&outputs),
                            rules: to_strings(rule),
                        });
                    }
                }
                Recipe::Command { .. } | Recipe::Script { .. } => {
                    register_action(actions, target.recipe.clone(), None)
                }
            };

            let edge = BuildEdge {
                action_id,
                inputs: to_paths(&target.sources),
                explicit_outputs: outputs.clone(),
                implicit_outputs: Vec::new(),
                order_only_deps: to_paths(&target.order_only_deps),
                phony: target.phony,
                always: target.always,
            };

            let mut duplicates = Vec::new();
            for out in &outputs {
                if targets.contains_key(out) {
                    duplicates.push(out.display().to_string());
                }
            }
            if !duplicates.is_empty() {
                return Err(IrGenError::DuplicateOutput {
                    outputs: duplicates,
                });
            }
            for out in outputs {
                targets.insert(out, edge.clone());
            }
        }
        Ok(())
    }

    fn process_defaults(manifest: &NetsukeManifest, defaults: &mut Vec<PathBuf>) {
        for name in &manifest.defaults {
            defaults.push(PathBuf::from(name));
        }
    }
}

fn register_action(
    actions: &mut HashMap<String, Action>,
    recipe: Recipe,
    description: Option<String>,
) -> String {
    let action = Action {
        recipe,
        description,
        depfile: None,
        deps_format: None,
        pool: None,
        restat: false,
    };
    let hash = ActionHasher::hash(&action);
    actions.entry(hash.clone()).or_insert(action);
    hash
}

fn to_paths(sol: &StringOrList) -> Vec<PathBuf> {
    match sol {
        StringOrList::Empty => Vec::new(),
        StringOrList::String(s) => vec![PathBuf::from(s)],
        StringOrList::List(v) => v.iter().map(PathBuf::from).collect(),
    }
}

fn to_strings(sol: &StringOrList) -> Vec<String> {
    match sol {
        StringOrList::Empty => Vec::new(),
        StringOrList::String(s) => vec![s.clone()],
        StringOrList::List(v) => v.clone(),
    }
}

fn extract_single(sol: &StringOrList) -> Option<&str> {
    match sol {
        StringOrList::String(s) => Some(s),
        StringOrList::List(v) if v.len() == 1 => v.first().map(String::as_str),
        _ => None,
    }
}

fn get_target_display_name(paths: &[PathBuf]) -> String {
    paths
        .first()
        .map(|p| p.display().to_string())
        .unwrap_or_default()
}
